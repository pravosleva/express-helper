#!/usr/bin/env node

require('module-alias')()

/**
 * Module dependencies.
 */

const debug = require('debug')('url-metadata-helper:server')
const path = require('path')
require('dotenv').config({ path: path.join(__dirname, '../server-dist/.env') })

const server = require('../server-dist/app')

const { getNormalizedPort } = require('~/utils/getNormalizedPort')

/**
 * Normalize a port into a number, string, or false.
 */

/**
 * Get port from environment and store in Express.
 */

const port = getNormalizedPort(process.env.PORT, 3000)

/**
 * Create HTTP server.
 */

// const server = http.createServer(app)

/**
 * SOCKET.IO: Add socket logic.
 */

// eslint-disable-next-line prefer-const
// io = require('socket.io')(server)
// require('~/utils/socket/withSocketChatRooms')(io)

// app.use((req, _res, next) => {
//   req.io = io
//   next()
// })

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  // const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      // console.error(`${bind} requires elevated privileges`)
      process.exit(1)
    case 'EADDRINUSE':
      process.exit(1)
    default:
      break
  }
}

server.on('error', onError)

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`
  debug(`Listening on ${bind}`)
}

server.on('listening', onListening)
