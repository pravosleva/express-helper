{"version":3,"sources":["common/components/MainPage/getErrors.ts","common/components/MainPage/MainPage.tsx","App.tsx","reportWebVitals.ts","common/mui/theme.ts","index.tsx"],"names":["getErrors","values","errors","password","apiResponseValidator","axiosRes","data","id","MainPage","useState","errorMsg","setErrorMsg","redirectTo","setRedirectTo","targetUiName","setTargetUiName","successMsg","setSuccessMsg","resetErrorMsg","useCallback","isAccepted","setIsAccepted","handleCheckAccept","_event","checked","query","queryString","parse","window","location","search","handleSubmit","a","hash","Promise","reject","axios","method","url","process","headers","then","Error","isOk","catch","err","message","res","resolve","isCorrect","Object","keys","length","Container","style","width","height","paddingTop","display","justifyContent","alignItems","maxWidth","initialValues","validate","onSubmit","setSubmitting","resetForm","uiName","redirect","console","log","isSubmitting","setFieldValue","Grid","container","spacing","item","xs","sm","autoFocus","component","TextField","name","type","label","error","helperText","fullWidth","size","variant","onChange","e","target","value","disabled","flexDirection","Button","marginBottom","color","endIcon","CircularProgress","FormControlLabel","control","Checkbox","Alert","severity","href","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","defaultTheme","palette","primary","main","secondary","red","A400","background","default","breakpoints","md","lg","xl","GlobalCss","withStyles","theme","code","padding","borderRadius","margin","fontSize","fontWeight","letterSpacing","body","overflowX","createMuiTheme","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","path","exact","document","getElementById"],"mappings":"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","file":"static/js/main.a82962c3.chunk.js","sourcesContent":["// import { IValues } from './interfaces';\n// import { isValidPhoneNumber } from 'react-phone-number-input';\nimport { TValues } from './interfaces'\n\nexport const getErrors = (values: TValues): Partial<TValues> => {\n  const errors: Partial<TValues> = {};\n  // if (!values.email) {\n  //   errors.email = 'Обязательное поле';\n  // }\n  // else if (\n  //   !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n  // ) {\n  //   errors.email = 'Некорректный email';\n  // }\n  if (!values.password) {\n    errors.password = 'Обязательное поле';\n  }\n  // if (!values.phone) {\n  //   errors.phone = 'Обязательное поле';\n  // } else if (!isValidPhoneNumber(values.phone)) {\n  //   errors.phone = 'Некорректный номер';\n  // }\n\n  return errors;\n};\n","import React, { useCallback, useState } from 'react'\nimport { Formik, Form as FormikForm, Field } from 'formik';\nimport {\n  Button,\n  Checkbox,\n  Container,\n  CircularProgress,\n  Grid,\n  FormControlLabel,\n  TextField,\n} from '@material-ui/core';\nimport axios from 'axios'\nimport { Alert } from '@material-ui/lab'\nimport { TValues } from './interfaces'\nimport { getErrors } from './getErrors'\n// import { useRouter } from '~/common/hooks'\nimport queryString from 'query-string'\n\nconst { REACT_APP_API_URL } = process.env\n\nconst apiResponseValidator = (axiosRes: any): boolean => !!axiosRes?.data?.id\n// const apiResponseAccessCodeValidator = (axiosRes: any): boolean => axiosRes?.data?.ok && !!axiosRes?.data?.accessCode\n\ntype TResSuccess = {\n  isOk: boolean\n  data: any\n  message: string\n  redirect: string\n  uiName: string\n}\ntype TResFail = {\n  isOk: boolean\n  message: string\n}\n\nexport const MainPage = () => {\n  const [errorMsg, setErrorMsg] = useState<string | null>(null)\n  const [redirectTo, setRedirectTo] = useState<string | null>(null)\n  const [targetUiName, setTargetUiName] = useState<string | null>(null)\n  const resetTargetUiName = () => {\n    setTargetUiName(null)\n  }\n  const [successMsg, setSuccessMsg] = useState<string | null>(null)\n  const resetErrorMsg = useCallback(() => {\n    setErrorMsg(null)\n  }, [setErrorMsg]);\n  const [isAccepted, setIsAccepted] = useState<boolean>(false);\n  const handleCheckAccept = useCallback(\n    (_event: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {\n      setIsAccepted(checked);\n    },\n    [setIsAccepted]\n  );\n  // const router = useRouter()\n  // const { query } = router\n  const query: any = queryString.parse(window.location.search)\n  const handleSubmit = useCallback(async (data: Partial<TValues>): Promise<TResSuccess | TResFail> => {\n    resetErrorMsg()\n    if (!query?.hash) return Promise.reject('No hash in query!')\n\n    const res: any = await axios({\n      method: 'POST',\n      url: `${REACT_APP_API_URL}/auth/login`,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      data: { ...data, hash: query?.hash },\n    })\n    .then((axiosRes) => {\n      if (!apiResponseValidator(axiosRes)) {\n        throw new Error('Data is incorrect');\n      }\n      return { isOk: true, data: axiosRes.data }\n    })\n    .catch((err) => {\n      return { isOk: false, message: err.message || 'No err.message' }\n    });\n\n    if (res.isOk) return Promise.resolve(res.data)\n\n    return Promise.reject(res.message)\n  }, [query?.hash, resetErrorMsg])\n  const isCorrect = useCallback(\n    (values: TValues): boolean => {\n      return Object.keys(getErrors(values)).length === 0 && isAccepted\n    },\n    [isAccepted]\n  );\n\n  return (\n    <Container\n      style={{\n        // marginTop: '20px',\n        width: '100%',\n        height: '100vh',\n        paddingTop: '15%',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'flex-start',\n      }}\n      maxWidth=\"sm\"\n      // className={clsx(classes.minimalHeightSetting, {\n      //   [baseClasses.noPaddingMobile]: isTheNotePage,\n      // })}\n    >\n      <Formik\n        initialValues={{\n          // email: 'admin@sp.ru',\n          password: '',\n        }}\n        validate={getErrors}\n        onSubmit={(values, { setSubmitting, resetForm }) => {\n          if (!isCorrect(values)) {\n            console.log('Check something')\n            return\n          }\n\n          resetErrorMsg();\n          resetTargetUiName();\n          setSubmitting(true);\n          \n          // TODO: GET /get-access-code-by-hash\n          // RES: { accessCode: string } -> code -> handleSubmit(values, code)\n\n          handleSubmit(values)\n            .then((data) => {\n              // addSuccessNotif({ message: 'Ваша заявка отправлена' });\n              setSubmitting(false);\n              setSuccessMsg(data.message)\n              // @ts-ignore\n              setTargetUiName(data.uiName)\n\n              // @ts-ignore\n              if (!!data.redirect) {\n                // @ts-ignore\n                setRedirectTo(data.redirect)\n                // @ts-ignore\n                // window.location.replace(data.redirect)\n              }\n              resetForm()\n            })\n            .catch((err) => {\n              // addDangerNotif({ message: err?.message || 'Извините, что-то пошло не так' });\n              setSubmitting(false)\n              setErrorMsg(err)\n            });\n        }}\n      >\n        {({ isSubmitting, errors, setFieldValue, values }) => (\n          <FormikForm>\n            <Grid container spacing={3}>\n              {/* <Grid item xs={12} sm={6}>\n                <Field\n                  // autoFocus\n                  // className={classes.standardFilledTextField}\n                  component={TextField}\n                  defaultValue={values.email}\n                  name=\"email\"\n                  type=\"text\"\n                  label=\"Email\"\n                  error={!!errors.email}\n                  helperText={errors.email}\n                  fullWidth\n                  size=\"small\"\n                  variant=\"outlined\"\n                  onChange={(e: any) => {\n                    setFieldValue('email', e.target.value);\n                  }}\n                />\n              </Grid> */}\n              <Grid item xs={12} sm={6}>\n                <Field\n                  autoFocus\n                  // className={classes.standardFilledTextField}\n                  component={TextField}\n                  name=\"password\"\n                  type=\"password\"\n                  label=\"Password\"\n                  error={!!errors.password}\n                  helperText={errors.password}\n                  fullWidth\n                  size=\"small\"\n                  variant=\"outlined\"\n                  onChange={(e: any) => {\n                    setFieldValue('password', e.target.value);\n                  }}\n                  disabled={isSubmitting || !!successMsg}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <div\n                  style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    width: '100%',\n                  }}\n                >\n                  <Button\n                    style={{ marginBottom: '5px' }}\n                    // className={classes.standardPrimaryBlueBtn}\n                    variant=\"contained\"\n                    type=\"submit\"\n                    color=\"primary\"\n                    // onClick={submitForm}\n                    fullWidth\n                    endIcon={\n                      isSubmitting && (\n                        <CircularProgress\n                          size={20}\n                        />\n                      )\n                    }\n                    disabled={isSubmitting || !isCorrect(values) || !!successMsg}\n                  >\n                    Submit\n                  </Button>\n                  <FormControlLabel\n                    disabled={isSubmitting || !!successMsg}\n                    // className={classes.smallPolicyWrapper}\n                    control={\n                      <Checkbox\n                        color=\"primary\"\n                        onChange={handleCheckAccept}\n                        checked={isAccepted}\n                      />\n                    }\n                    // onChange={(e: any) => { console.log(e); }}\n                    label={\n                      <span>\n                        <b>cookies</b> is good\n                      </span>\n                    }\n                  />\n                </div>\n              </Grid>\n              {!!errorMsg &&\n                (\n                  <Grid item xs={12}>\n                      <Alert\n                        severity=\"error\"\n                        variant=\"outlined\"\n                        // action={\n                        //   <IconButton\n                        //     aria-label=\"close\"\n                        //     color=\"inherit\"\n                        //     size=\"small\"\n                        //     onClick={() => {\n                        //       setIsIMEIAlertOpen(false);\n                        //     }}\n                        //   >\n                        //     <CloseIcon fontSize=\"inherit\" />\n                        //   </IconButton>\n                        // }\n                      >\n                        {errorMsg}\n                      </Alert>\n                    </Grid>\n                )\n              }\n              {!!successMsg &&\n                (\n                  <Grid item xs={12}>\n                    <Alert\n                      severity=\"success\"\n                      variant=\"outlined\"\n                      // action={\n                      //   <IconButton\n                      //     aria-label=\"close\"\n                      //     color=\"inherit\"\n                      //     size=\"small\"\n                      //     onClick={() => {\n                      //       setIsIMEIAlertOpen(false);\n                      //     }}\n                      //   >\n                      //     <CloseIcon fontSize=\"inherit\" />\n                      //   </IconButton>\n                      // }\n                    >\n                      {successMsg}. {!!redirectTo && <a href={redirectTo}>{targetUiName}</a>}\n                    </Alert>\n                  </Grid>\n                )\n              }\n            </Grid>\n          </FormikForm>\n        )}\n      </Formik>\n    </Container>\n  )\n}","import React from 'react';\nimport { MainPage } from '~/common/components/MainPage'\n\nfunction App() {\n  return <MainPage />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import red from '@material-ui/core/colors/red'\nimport { createMuiTheme, Theme, withStyles } from '@material-ui/core/styles'\n// import { Breakpoint } from '@material-ui/core/styles/createBreakpoints'\n// See also: https://material-ui.com/guides/typescript/#customization-of-theme\n\n// Like this: https://github.com/mui-org/material-ui/blob/master/examples/create-react-app-with-typescript/src/theme.tsx\n// See also: https://material-ui.com/ru/styles/basics/\nexport const defaultTheme = {\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n  breakpoints: {\n    values: {\n      xs: 0,\n      sm: 600,\n      md: 960,\n      lg: 1280,\n      xl: 1920,\n    },\n  },\n}\n\nexport const GlobalCss = withStyles((theme: Theme) => ({\n  // @global is handled by jss-plugin-global.\n  '@global': {\n    // You should target [class*=\"MuiButton-root\"] instead if you nest themes.\n    // '.MuiButton-root': {}\n    // See also: https://material-ui.com/ru/customization/components/\n    code: {\n      background: 'rgba(250, 239, 240, 0.78)',\n      // boxShadow: '0px 0px 3px rgba(0, 0, 0, 0.2)',\n      color: '#b44437',\n      padding: '3px 4px',\n      borderRadius: '5px',\n      margin: '0 1px',\n      fontSize: '0.9em',\n      fontWeight: '500',\n      letterSpacing: '0.3px',\n    },\n    a: {\n      color: theme.palette.primary.main,\n    },\n    body: {\n      overflowX: 'hidden',\n    },\n  },\n}))(() => null)\n\nexport const theme = createMuiTheme(defaultTheme)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '~/App';\nimport reportWebVitals from './reportWebVitals';\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { GlobalCss, theme } from '~/common/mui/theme'\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport { HashRouter, Switch, Route } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <ThemeProvider theme={theme}>\n        {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n        <CssBaseline />\n        <GlobalCss />\n        <Switch>\n          <Route key='/' path='/' exact={true} component={App} />\n        </Switch>\n      </ThemeProvider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}